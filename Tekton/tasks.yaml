apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  namespace: demo
spec:
  steps:
    - name: clone-repo
      image: alpine/git
      script: |
        #!/bin/sh
        if [ -d "/workspace/source" ]; then
          echo "Directory exists, cleaning up..."
          rm -rf /workspace/source/*
        fi
        git clone $(params.repo_url) /workspace/source
  params:
    - name: repo_url
      type: string
  workspaces:
    - name: source

---
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: build-app
# spec:
#   steps:
#     - name: build
#       image: maven:3.8.5-openjdk-11
#       workingDir: /workspace/source
#       script: |
#         #!/bin/sh
#         mvn clean package
#   workspaces:
#     - name: source

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: docker-build-and-push
  namespace: demo
spec:
  steps:
    # - name: dind-setup
    #   image: docker:20.10.8-dind
    #   script: |
    #     #!/bin/sh
    #     dockerd-entrypoint.sh &
    #     sleep 5
    - name: buildah-build
      image: quay.io/buildah/stable:latest
      script: |
        #!/bin/sh
        buildah bud -t $(params.image) -f dockerfile
        buildah push $(params.image)
    # - name: docker-build
    #   image: docker:20.10.8
    #   script: |
    #     #!/bin/sh
    #     docker build -t $(params.image) .
    #     echo $DOCKER_PASSWORD | docker login idpdeveacr.azurecr.io -u $DOCKER_USERNAME  -p $DOCKER_PASSWORD
    #     docker push $(params.image)
      env:
        - name: REGISTRY_AUTH_FILE
          value: /workspace/registry-auth/auth.json
      # - name: DOCKER_USERNAME
      #   valueFrom:
      #     secretKeyRef:
      #       name: docker-registry
      #       key: docker-username
      # - name: DOCKER_PASSWORD
      #   valueFrom:
      #     secretKeyRef:
      #       name: docker-registry
      #       key: docker-password
      volumeMounts:
        - name: registry-auth-volume
          mountPath: /workspace/registry-auth
  params:
    - name: image
      type: string
  workspaces:
    - name: source
  volumes:
    - name: registry-auth-volume
      secret:
        secretName: registry-auth
  
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-aks
  namespace: demo
spec:
  steps:
    - name: kubectl-apply
      image: bitnami/kubectl:latest
      script: |
        #!/bin/sh
        kubectl apply -f $(params.deployment_manifest)
    # - name: helm-upgrade
    #   image: alpine/helm:3.10.0
    #   script: |
    #     #!/bin/sh
    #     helm upgrade --install springboot-app $(params.helm_chart) \
    #       --namespace $(params.namespace) --set image.repository=$(params.image)
  params:
    - name: deployment_manifest
      type: string
    # - name: helm_chart
    #   type: string
    # - name: namespace
    #   type: string
    # - name: image
    #   type: string
